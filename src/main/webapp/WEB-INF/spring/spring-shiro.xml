<?xml version="1.0" encoding="UTF-8" ?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/mvc  
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">  
  
    <context:annotation-config />  
    <!-- 默认扫描的包路径 -->  
    <context:component-scan base-package="com" />  
  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager" />  
        <property name="successUrl" value="/member/loginsuccess.jsp" />  
        <property name="loginUrl" value="/login.jsp" />  
        <property name="unauthorizedUrl" value="/error.html" />  
        <property name="filters">  
            <map>  
                <entry key="authc" value-ref="shiro"></entry>  
            </map>  
        </property>  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
  
        <property name="filterChainDefinitions">  
            <value>  
                /login.jsp=anon  
                /member/loginsuccess.jsp=anon  
                /error.html=authc  
                /member/**=authc,roles["edit"]  
                /edit=authc,roles["edit"],perms["delete1"]  
                /getJson/**=anon  
            </value>  
        </property>  
    </bean>  
<!--     <bean id="shiro" class="com.cat.shiro.ShiroFilter">  
  
    </bean>  
    <bean id="shiroRealm" class="com.cat.shiro.ShiroRealm" />   -->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
<!--         <property name="realm" ref="shiroRealm" />  
                
        <property name="realm" ref="BidRealm" />  
        
        需要使用cache的话加上这句 <property name="cacheManager" ref="shiroEhcacheManager"   
            />   -->
    </bean>  
  
    <!-- 用户授权信息Cache, 采用EhCache，需要的话就配置上此信息 <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">   
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"   
        /> </bean> -->  
  
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  
  
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after   
        the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
    <bean  
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"  
        depends-on="lifecycleBeanPostProcessor">  
        <property name="proxyTargetClass" value="true" />  
    </bean>  
    <bean  
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>  
</beans>  